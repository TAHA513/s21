import express from 'express';
import cors from 'cors';
import { createServer } from 'http';
import { setupViteServer } from './vite.js';
import { setupRoutes } from './routes.js';
import { testConnection } from './db.js';
import { storage } from './storage.js';

async function main() {
  // ุชุฌููุฒ ุชุทุจูู Express
  const app = express();

  // ุชูููู CORS ูุฅุนุฏุงุฏุงุช JSON
  app.use(cors({
    origin: true,
    credentials: true
  }));
  app.use(express.json());
  app.use(express.urlencoded({ extended: true }));

  console.log("๐ ุจุฏุก ุชุดุบูู ุงูุฎุงุฏู...");

  // ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
  const dbConnected = await testConnection();
  if (!dbConnected) {
    console.error("โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุชุ ุณูุชู ูุญุงููุฉ ุฅูุดุงุก ุงูุฌุฏุงูู ุนูุฏ ุงูุทูุจ ูุงุญููุง");
  }

  // ุฅุนุฏุงุฏ ุทุฑู API
  await setupRoutes(app);
  console.log("โ ุชู ุชุณุฌูู ุทุฑู API ุจูุฌุงุญ");

  // ุฅูุดุงุก ูุถูุงู ูุฌูุฏ ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
  await storage.ensureTablesExist()
    .then(success => {
      if (success) {
        console.log("โ ุชู ุงูุชุญูู ูู ุงูุฌุฏุงูู ูุฅูุดุงุฆูุง ุจูุฌุงุญ");
      } else {
        console.error("โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุฌุฏุงูู");
      }
    });

  // ุงุณุชุฎุฏุงู ูููุฐ 8080 ูุชุฌูุจ ุฃู ุชุนุงุฑุถ
  const port = process.env.PORT || 8080;

  // ุฅูุดุงุก ุฎุงุฏู HTTP
  const server = createServer(app);

  // ุฅุนุฏุงุฏ ุฎุงุฏู Vite ูููุงุฌูุฉ ุงูุฃูุงููุฉ
  try {
    await setupViteServer(app, server);
    console.log("โ ุชู ุฅุนุฏุงุฏ ุฎุงุฏู Vite ุจูุฌุงุญ");
  } catch (error) {
    console.error("โ ูุดู ูู ุฅุนุฏุงุฏ ุฎุงุฏู Vite:", error);
  }

  // ุฅููุงู ุฃู ุนูููุงุช ุณุงุจูุฉ ุนูู ููุณ ุงููููุฐ (ุฅุฌุฑุงุก ุจุฏูู)
  server.on('error', (error) => {
    if (error.code === 'EADDRINUSE') {
      console.error(`โ ุงููููุฐ ${port} ููุฏ ุงูุงุณุชุฎุฏุงู ุจุงููุนูุ ุฌุงุฑู ุงููุญุงููุฉ ุนูู ูููุฐ ุขุฎุฑ...`);
      setTimeout(() => {
        server.close();
        server.listen(port + 1, '0.0.0.0');
      }, 1000);
    } else {
      console.error(`โ ุฎุทุฃ ูู ุงูุฎุงุฏู:`, error);
    }
  });

  // ุจุฏุก ุงูุงุณุชูุงุน ุนูู ุงููููุฐ

  // ุจุฏุก ุงูุงุณุชูุงุน ุนูู ุงููููุฐ
  server.listen(port, '0.0.0.0', () => {
    console.log(`โ ุงูุฎุงุฏู ูุนูู ุนูู ุงููููุฐ ${port}`);
    console.log(`๐ฑ ููููู ุงููุตูู ุฅูู ุงูุชุทุจูู ูู ุฎูุงู: http://0.0.0.0:${port}/`);

      // ุฅุนุฏุงุฏ WebSocket
      const WebSocket = require('ws');
      const wss = new WebSocket.Server({ server });

      wss.on('connection', (ws) => {
        console.log('โ ุงุชุตุงู WebSocket ุฌุฏูุฏ');

        // ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฑุญูุจ ุนูุฏ ุงูุงุชุตุงู
        ws.send(JSON.stringify({ type: 'connection', message: 'ูุฑุญุจูุง ุจู ูู ูุธุงู ุฅุฏุงุฑุฉ ุงูุฃุนูุงู' }));

        // ุงุณุชูุงุน ููุฑุณุงุฆู ุงููุงุฑุฏุฉ
        ws.on('message', (message) => {
          console.log('๐ฉ ุฑุณุงูุฉ ูุงุฑุฏุฉ:', message.toString());
          try {
            const parsedMessage = JSON.parse(message.toString());

            // ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ ุญุณุจ ุงูููุน
            if (parsedMessage.type === 'refresh') {
              // ุฅุนุงุฏุฉ ุชุญููู ุงูุจูุงูุงุช ูุฅุฑุณุงููุง ููุนููู
              wss.clients.forEach((client) => {
                if (client.readyState === WebSocket.OPEN) {
                  client.send(JSON.stringify({ type: 'refresh', timestamp: new Date().toISOString() }));
                }
              });
            }
          } catch (error) {
            console.error('โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุฑุณุงูุฉ WebSocket:', error);
          }
        });

        // ูุนุงูุฌุฉ ุฅุบูุงู ุงูุงุชุตุงู
        ws.on('close', () => {
          console.log('โ ุชู ุฅุบูุงู ุงุชุตุงู WebSocket');
        });

        // ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
        ws.on('error', (error) => {
          console.error('โ ุฎุทุฃ ูู ุงุชุตุงู WebSocket:', error);
        });
      });

      // ุฅุฑุณุงู ุฅุดุนุงุฑุงุช ุจุชุญุฏูุซ ุงูุจูุงูุงุช ูุฌููุน ุงูุนููุงุก
      const notifyClients = (type, data) => {
        wss.clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({ type, data, timestamp: new Date().toISOString() }));
          }
        });
      };

      // ุชุตุฏูุฑ ูุธููุฉ ุงูุฅุดุนุงุฑ ููุงุณุชุฎุฏุงู ูู ูุญุฏุงุช ุฃุฎุฑู
      global.notifyClients = notifyClients;
    });

  // ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุบูุฑ ุงููุชููุนุฉ
  process.on('uncaughtException', (error) => {
    console.error('โ ุฎุทุฃ ุบูุฑ ูุชููุน:', error);
  });

  process.on('unhandledRejection', (reason, promise) => {
    console.error('โ ูุนุฏ ุบูุฑ ูุนุงูุฌ:', reason);
  });
}

// ุชุดุบูู ุงูุฎุงุฏู
main().catch((error) => {
  console.error("โ ุฎุทุฃ ุฃุซูุงุก ุจุฏุก ุชุดุบูู ุงูุฎุงุฏู:", error);
  process.exit(1);
});